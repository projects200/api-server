# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD to AWS

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "main" ]
    
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  IMAGE_TAG: latest
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  CODEDEPLOY_APP: ${{ secrets.CODEDEPLOY_APP }}
  CODEDEPLOY_GROUP: ${{ secrets.CODEDEPLOY_GROUP }}


jobs:
  build: 
    name: Build with Gradle
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew clean build

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REPOSITORY:$IMAGE_TAG

      - name: Zip deployment package
        run: |
          mkdir deploy
          cp appspec.yml deploy/
          cp -r scripts deploy/
          echo "{\"ImageURI\":\"$ECR_REPOSITORY:$IMAGE_TAG\"}" > deploy/imageDetail.json
          zip -r deploy.zip deploy

      - name: Upload to S3
        run: aws s3 cp deploy.zip s3://$S3_BUCKET/deploy.zip

      - name: Deploy with CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name $CODEDEPLOY_APP \
            --deployment-group-name $CODEDEPLOY_GROUP \
            --s3-location bucket=$S3_BUCKET,key=deploy.zip,bundleType=zip
