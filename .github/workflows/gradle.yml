# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD to AWS

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  Backend-CI: 
    name: Build and Upload to S3
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build Gradle
      run: |
        #cd server
        mkdir -p src/main/resources/
        # echo ${{ secrets.APPLICATION_PROD_YML }} | base64 -d > src/main/resources/application-prod.yml
        chmod +x gradlew
        ./gradlew build
      shell: bash

    - name: Configure AWS credentials
      if: ${{ github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' }}
      #if: ${{ github.ref == 'refs/heads/main' }}
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Build and push image to Amazon ECR
      if: ${{ github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' }}
      #if: ${{ github.ref == 'refs/heads/main' }}
      env:
        REGISTRY: 825773631552.dkr.ecr.ap-northeast-2.amazonaws.com/undabang-repository
        REPOSITORY: undabang-repository
        IMAGE_TAG: latest
      run: |
        aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $REGISTRY 
        mkdir -p deploy-main
         #cd server
        cp build/libs/*.jar deploy-main/
        cp src/Dockerfile deploy-main/
        cd deploy-main
        docker build -t server-main .
        rm *.jar
        # docker tag $REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG
        docker tag server-main $REGISTRY:$IMAGE_TAG
        docker push $REGISTRY:$IMAGE_TAG


    - name: Upload build file to S3 and trigger CodeDeploy
     # if: ${{ github.ref == 'refs/heads/main' }}
      if: ${{ github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' }}
      run: |
        #cd server
        mkdir -p deploy && cp -r deploy-main/* deploy/
        cp appspec.yml deploy/
        cp docker-compose.yml deploy/
        mkdir -p deploy/scripts
        cp scripts/deploy.sh deploy/scripts/
        
        zip -r deploy.zip deploy

        aws s3 cp deploy.zip s3://${{ secrets.AWS_S3_DEV_BUCKET_NAME }}/deploy.zip

        aws deploy create-deployment \
        --application-name ${{ secrets.AWS_CODEDEPLOY_MAIN_APP_NAME }} \
        --deployment-config-name CodeDeployDefault.AllAtOnce \
        --deployment-group-name ${{ secrets.AWS_CODEDEPLOY_MAIN_GROUP_NAME }} \
        --file-exists-behavior OVERWRITE \
        --s3-location bucket=${{ secrets.AWS_S3_DEV_BUCKET_NAME }},bundleType=zip,key=deploy.zip
