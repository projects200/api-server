plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.project200'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	asciidoctorExt
	mockitoAgent
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('springRestDocsVersion', "3.0.3")
	set('springCloudAwsVersion', "3.3.0")
}

dependencies {
	// Spring Cloud AWS BOM (Bill of Materials)
	implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:${springCloudAwsVersion}")

	// Spring Boot 의존성
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

	// 데이터베이스
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// AWS 관련
	implementation "io.awspring.cloud:spring-cloud-aws-starter-s3"	// Spring Cloud AWS S3 Starter

	// 테스트 의존성
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	asciidoctorExt "org.springframework.restdocs:spring-restdocs-asciidoctor:${springRestDocsVersion}"
	testImplementation 'io.awspring.cloud:spring-cloud-aws-testcontainers'
	testImplementation 'org.testcontainers:localstack'
	testImplementation 'org.testcontainers:junit-jupiter'

	// Mockito 설정
	mockitoAgent('org.mockito:mockito-core') {
		transitive = false
	}
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
	jvmArgs("-javaagent:${configurations.mockitoAgent.asPath}")
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	sourceDir file('src/docs/asciidoc')
	attributes([
			'snippets': snippetsDir
	])
	dependsOn tasks.named('test')
}

// 생성된 문서를 JAR에 포함시키기
tasks.named('bootJar') {
	dependsOn tasks.named('asciidoctor') // asciidoctor 작업이 먼저 실행되도록 보장
	from("${tasks.named('asciidoctor').get().outputDir}") { // AsciidoctorTask의 outputDir 사용
		into 'static/docs'
	}
}